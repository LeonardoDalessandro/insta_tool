{"maximumSentences":7,"lang":"pt","media":"Wikipedia","searchTerm":"Vue.js","prefix":"What is","template":"minimal","colorThemeRGB":[65,184,131],"sourceContentOriginal":"Vue.js (informalmente chamado de Vue; pronunciado  /vjuː/) é um framework JavaScript de código-aberto, focado no desenvolvimento de interfaces de usuário e aplicativos de página única.\n\n\n== Visão geral ==\nO Vue.js conta com uma arquitetura que pode ser adotada de forma incremental, e que foca na renderização declarativa e na composição de componentes. Funcionalidades avançadas necessárias para aplicações complexas (como encaminhamento, gestão de estados e automação de compilação) são oferecidas por meio de bibliotecas e pacotes de suporte mantidos oficialmente , sendo o Nuxt.js como uma das soluções mais populares. \n\n\n== História ==\nO Vue foi criado pelo desenvolvedor independente chinês Evan You, após trabalhar para o Google usando o AngularJS em vários projetos. Posteriormente, ele resumiu o pensamento por trás do processo de criação do Vue: \"Pensei, e se eu pudesse retirar somente a parte que realmente gostava do Angular e criar algo muito leve?\".  O primeiro commit ao código-fonte do projeto data de julho de 2013, e o framework foi lançado oficialmente em fevereiro do ano seguinte, em 2014.   \n\n\n=== Versões ===\n\n\n== Funcionalidades ==\n\n\n=== Componentes ===\nOs componentes Vue extendem elementos HTML básicos para encapsular código reutilizável. A um alto nível, os componentes são elementos personalizados aos quais o compilador do Vue associa determinados comportamentos. No Vue, um componente é essencialmente uma instância do Vue com opções predefinidas. O trecho de código abaixo contém um exemplo de um componente Vue. O componente apresenta um botão e simplesmente imprime o número de vezes que o botão é clicado:   \n\n\n=== Modelos ===\nO Vue usa uma sintaxe de modelo baseada em HTML que permite vincular o DOM renderizado aos dados contidos na instância subjacente do Vue. Todos os modelos do Vue são HTML válido, e podem ser interpretados por navegadores compatíveis e analisadores HTML. Compilando os modelos, o Vue transforma-os em funções de renderização do DOM virtual. O Modelo de Objeto de Documento (ou \"DOM\") virtual permite ao Vue renderizar componentes internamente antes de atualizar o navegador. Combinado com o sistema de reatividade, consegue calcular o número mínimo de componentes a serem re-renderizados, e manipular minimamente o DOM quando o estado do aplicativo é alterado. \nUsuários do Vue podem usar a sintaxe de modelo ou optar por escrever diretamente funções de renderização usando JSX. As funções de renderização permitem que o aplicativo seja construído a partir de componentes de software. \n\n\n=== Reatividade ===\nO sistema de reatividade do Vue utiliza objetos JavaScript simples e re-renderização otimizada. Cada componente controla suas próprias dependências reativas durante sua renderização, com o objetivo de que o sistema saiba exatamente quando e quais componentes renderizar novamente.\n\n\n=== Transições ===\nO Vue permite diversas maneiras de aplicar efeitos de transição quando itens são inseridos, atualizados ou removidos do DOM. Isso inclui ferramentas para: \n\nAplicar automaticamente classes para transições e animações CSS\nIntegrar bibliotecas de animação CSS de terceiros, como a Animate.css\nUtilizar JavaScript para manipular diretamente o DOM durante ganchos de transição\nIntegrar bibliotecas de animação JavaScript de terceiros, como Velocity.jsQuando um elemento envolto em um componente de transição é inserido ou removido, o que acontece é: \n\nO Vue detecta automaticamente se o elemento-alvo tem transições ou animações CSS aplicadas; caso em que as classes de transição CSS serão adicionadas ou removidas nos momentos apropriados.\nSe o componente de transição fornecer ganchos JavaScript, esses ganchos serão chamados nos momentos apropriados.\nSe nenhuma transição/animação CSS for detectada e nenhum gancho JavaScript for fornecido, as operações do DOM para inserção e/ou remoção serão executadas imediatamente no próximo frame.  \n\n\n=== Encaminhamento ===\nUma desvantagem tradicional dos aplicativos de página única (SPAs) é a incapacidade de compartilhar links para a \"sub-página\" exata em uma página da web específica. Como os SPAs atendem a seus usuários apenas uma resposta baseada em URL do servidor (normalmente retornando index.html ou index.vue), marcar determinadas telas ou compartilhar links para seções específicas é normalmente difícil, se não impossível. Para resolver esse problema, muitos roteadores do lado do cliente delimitam suas URLs dinâmicas com um hashbang (#!), por exemplo, page.com/#! /. Com o HTML5, no entanto, a maior parte dos navegadores modernos oferece suporte ao encaminhamento sem hashbangs. \n\nO Vue oferece uma interface para alterar o que é exibido na página com base no caminho atual da URL—independentemente de como ela foi alterada (seja por link enviado por email, atualização da página ou links na própria página). Além disso, o uso de encaminhamento front-end permite a transição intencional do caminho do navegador quando certos eventos (por exemplo, cliques) ocorrem em botões ou links. O próprio Vue não vem com roteamento de hash front-end. Mas o pacote de código-aberto \"vue-router\" fornece uma API para atualizar a URL do aplicativo, suporta o botão voltar (histórico de navegação) e e-mail de redefinição de senha ou verificação de email com parâmetros de URL de autenticação. Suporta ainda o mapeamento de rotas aninhadas para componentes aninhados e oferece controle de transição preciso. Com o Vue, desenvolvedores já estão compondo aplicativos com pequenos blocos construindo componentes maiores. Com o vue-router adicionado à mistura, os componentes devem simplesmente ser mapeados para as rotas às quais pertencem, e as rotas parent/raiz devem indicar onde os \"filhos\" devem renderizar.  O código acima: \nDefine uma rota de front-end em websitename.com/user/<id> .\nQue será renderizada no componente User definido em (const User. . . )\nPermite que o componente User passe o ID específico do usuário digitado na URL usando a chave de parâmetros do objeto $route: $route.params.id.\nEste modelo (variando de acordo com os parâmetros passados para o roteador) será renderizado em <router-view></router-view> dentro da div#app do DOM.\nO HTML final gerado para alguém que digite websitename.com/user/1 será: \n\n\n== Ecossistema ==\nA biblioteca principal vem com ferramentas e bibliotecas desenvolvidas pela equipe principal e por colaboradores. \n\n\n=== Ferramentas Oficiais ===\nDevtools - extensão devtools do navegador para depuração de aplicativos Vue.js\nVue CLI - Ferramentas padrão para desenvolvimento rápido com Vue.js\nVue Loader - um loader webpack que permite a escrita de componentes Vue em um formato chamado SFC (Single-File Components)\n\n\n=== Bibliotecas Oficiais ===\nVue Router - O router oficial para o Vue.js\nVuex - Gerenciamento centralizado de estado inspirado em fluxo para Vue.js\nVue Server Renderer - Renderização server-side para Vue.js\n\n\n== Veja também ==\nReact\nAngularJS\nAngular\nFramework JavaScript\nBiblioteca JavaScript\nModel – view – ViewModel\n\n\n== Fontes ==\nLicenciado sob uma licença MIT. Declaração de licença : Guia Vue.js., Vue.js.\n\n\n== Referências ==\n\n\n== Ligações externas ==\nPágina oficial","sourceContentSanitized":"Vue.js (informalmente chamado de Vue; pronunciado  /vjuː/) é um framework JavaScript de código-aberto, focado no desenvolvimento de interfaces de usuário e aplicativos de página única. O Vue.js conta com uma arquitetura que pode ser adotada de forma incremental, e que foca na renderização declarativa e na composição de componentes. Funcionalidades avançadas necessárias para aplicações complexas (como encaminhamento, gestão de estados e automação de compilação) são oferecidas por meio de bibliotecas e pacotes de suporte mantidos oficialmente , sendo o Nuxt.js como uma das soluções mais populares.  O Vue foi criado pelo desenvolvedor independente chinês Evan You, após trabalhar para o Google usando o AngularJS em vários projetos. Posteriormente, ele resumiu o pensamento por trás do processo de criação do Vue: \"Pensei, e se eu pudesse retirar somente a parte que realmente gostava do Angular e criar algo muito leve?\".  O primeiro commit ao código-fonte do projeto data de julho de 2013, e o framework foi lançado oficialmente em fevereiro do ano seguinte, em 2014.    Os componentes Vue extendem elementos HTML básicos para encapsular código reutilizável. A um alto nível, os componentes são elementos personalizados aos quais o compilador do Vue associa determinados comportamentos. No Vue, um componente é essencialmente uma instância do Vue com opções predefinidas. O trecho de código abaixo contém um exemplo de um componente Vue. O componente apresenta um botão e simplesmente imprime o número de vezes que o botão é clicado:    O Vue usa uma sintaxe de modelo baseada em HTML que permite vincular o DOM renderizado aos dados contidos na instância subjacente do Vue. Todos os modelos do Vue são HTML válido, e podem ser interpretados por navegadores compatíveis e analisadores HTML. Compilando os modelos, o Vue transforma-os em funções de renderização do DOM virtual. O Modelo de Objeto de Documento (ou \"DOM\") virtual permite ao Vue renderizar componentes internamente antes de atualizar o navegador. Combinado com o sistema de reatividade, consegue calcular o número mínimo de componentes a serem re-renderizados, e manipular minimamente o DOM quando o estado do aplicativo é alterado.  Usuários do Vue podem usar a sintaxe de modelo ou optar por escrever diretamente funções de renderização usando JSX. As funções de renderização permitem que o aplicativo seja construído a partir de componentes de software.  O sistema de reatividade do Vue utiliza objetos JavaScript simples e re-renderização otimizada. Cada componente controla suas próprias dependências reativas durante sua renderização, com o objetivo de que o sistema saiba exatamente quando e quais componentes renderizar novamente. O Vue permite diversas maneiras de aplicar efeitos de transição quando itens são inseridos, atualizados ou removidos do DOM. Isso inclui ferramentas para:  Aplicar automaticamente classes para transições e animações CSS Integrar bibliotecas de animação CSS de terceiros, como a Animate.css Utilizar JavaScript para manipular diretamente o DOM durante ganchos de transição Integrar bibliotecas de animação JavaScript de terceiros, como Velocity.jsQuando um elemento envolto em um componente de transição é inserido ou removido, o que acontece é:  O Vue detecta automaticamente se o elemento-alvo tem transições ou animações CSS aplicadas; caso em que as classes de transição CSS serão adicionadas ou removidas nos momentos apropriados. Se o componente de transição fornecer ganchos JavaScript, esses ganchos serão chamados nos momentos apropriados. Se nenhuma transição/animação CSS for detectada e nenhum gancho JavaScript for fornecido, as operações do DOM para inserção e/ou remoção serão executadas imediatamente no próximo frame.   Uma desvantagem tradicional dos aplicativos de página única (SPAs) é a incapacidade de compartilhar links para a \"sub-página\" exata em uma página da web específica. Como os SPAs atendem a seus usuários apenas uma resposta baseada em URL do servidor (normalmente retornando index.html ou index.vue), marcar determinadas telas ou compartilhar links para seções específicas é normalmente difícil, se não impossível. Para resolver esse problema, muitos roteadores do lado do cliente delimitam suas URLs dinâmicas com um hashbang (#!), por exemplo, page.com/#! /. Com o HTML5, no entanto, a maior parte dos navegadores modernos oferece suporte ao encaminhamento sem hashbangs.  O Vue oferece uma interface para alterar o que é exibido na página com base no caminho atual da URL—independentemente de como ela foi alterada (seja por link enviado por email, atualização da página ou links na própria página). Além disso, o uso de encaminhamento front-end permite a transição intencional do caminho do navegador quando certos eventos (por exemplo, cliques) ocorrem em botões ou links. O próprio Vue não vem com roteamento de hash front-end. Mas o pacote de código-aberto \"vue-router\" fornece uma API para atualizar a URL do aplicativo, suporta o botão voltar (histórico de navegação) e e-mail de redefinição de senha ou verificação de email com parâmetros de URL de autenticação. Suporta ainda o mapeamento de rotas aninhadas para componentes aninhados e oferece controle de transição preciso. Com o Vue, desenvolvedores já estão compondo aplicativos com pequenos blocos construindo componentes maiores. Com o vue-router adicionado à mistura, os componentes devem simplesmente ser mapeados para as rotas às quais pertencem, e as rotas parent/raiz devem indicar onde os \"filhos\" devem renderizar.  O código acima:  Define uma rota de front-end em websitename.com/user/<id> . Que será renderizada no componente User definido em (const User. . . ) Permite que o componente User passe o ID específico do usuário digitado na URL usando a chave de parâmetros do objeto $route: $route.params.id. Este modelo (variando de acordo com os parâmetros passados para o roteador) será renderizado em <router-view></router-view> dentro da div#app do DOM. O HTML final gerado para alguém que digite websitename.com/user/1 será:  A biblioteca principal vem com ferramentas e bibliotecas desenvolvidas pela equipe principal e por colaboradores.  Devtools - extensão devtools do navegador para depuração de aplicativos Vue.js Vue CLI - Ferramentas padrão para desenvolvimento rápido com Vue.js Vue Loader - um loader webpack que permite a escrita de componentes Vue em um formato chamado SFC (Single-File Components) Vue Router - O router oficial para o Vue.js Vuex - Gerenciamento centralizado de estado inspirado em fluxo para Vue.js Vue Server Renderer - Renderização server-side para Vue.js React AngularJS Angular Framework JavaScript Biblioteca JavaScript Model – view – ViewModel Licenciado sob uma licença MIT. Declaração de licença : Guia Vue.js., Vue.js. Página oficial","slides":[{"text":"Vue.js (informalmente chamado de Vue; pronunciado /vjuː/) é um framework JavaScript de código-aberto, focado no desenvolvimento de interfaces de usuário e aplicativos de página única.","keywords":["desenvolvimento de interfaces de usuário","Vue.js","framework JavaScript de código-aberto"],"images":[]},{"text":"O Vue.js conta com uma arquitetura que pode ser adotada de forma incremental, e que foca na renderização declarativa e na composição de componentes.","keywords":["forma incremental","foca na","renderização declarativa"],"images":[]},{"text":"Funcionalidades avançadas necessárias para aplicações complexas (como encaminhamento, gestão de estados e automação de compilação) são oferecidas por meio de bibliotecas e pacotes de suporte mantidos oficialmente , sendo o Nuxt.js como uma das soluções mais populares.","keywords":["Funcionalidades avançadas necessárias","aplicações complexas","gestão de estados"],"images":[]},{"text":"O Vue foi criado pelo desenvolvedor independente chinês Evan You, após trabalhar para o Google usando o AngularJS em vários projetos.","keywords":["chinês Evan You","desenvolvedor independente","Vue"],"images":[]},{"text":"Posteriormente, ele resumiu o pensamento por trás do processo de criação do Vue: \"Pensei, e se eu pudesse retirar somente a parte que realmente gostava do Angular e criar algo muito leve?\".","keywords":["processo de criação do Vue","pensamento","parte"],"images":[]},{"text":"O primeiro commit ao código-fonte do projeto data de julho de 2013, e o framework foi lançado oficialmente em fevereiro do ano seguinte, em 2014.","keywords":["primeiro commit","código-fonte do projeto","fevereiro do ano seguinte"],"images":[]},{"text":"Os componentes Vue extendem elementos HTML básicos para encapsular código reutilizável.","keywords":["componentes Vue","elementos HTML básicos","código reutilizável"],"images":[]}],"downloadedImages":{"logo":{"query":"Vue.js logo","suggestions":[{"link":"https://www.endpoint.com/blog/2017/12/26/enhancing-your-sites-with-vue/vuejs-logo.png","size":{"width":400,"height":400}},{"link":"https://cdn.mos.cms.futurecdn.net/VyvNkKMWyRaMeunRAq9KPh.jpg","size":{"width":1000,"height":563}},{"link":"https://blog.jongallant.com/2019/02/vuejs-vetur-vscode-format-eslint-issues/vuevscode.png","size":{"width":700,"height":394}},{"link":"https://www.codedodle.com/wp-content/uploads/2017/02/vuebanner.png","size":{"width":700,"height":326}},{"link":"https://camo.envatousercontent.com/20ba93f46e6370523df1b512836035afcf10c6aa/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f6c696e6b6f39312f696d6167652f75706c6f61642f76313533313431333632352f6275696c742d776974682e706e67","size":{"width":616,"height":465}}],"selectedImage":"logo-0-original.png"}}}